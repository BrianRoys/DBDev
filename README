-------------------------------------------------------------------------------
DBDev aids in the maintinance of your database throughout the software 
development life cycle by automating the normally error prone manual 
job of keeping the databases in-synch and up-to-date.

Done properly there should be a separate database for each phase: DEV, QA, UAT 
and PROD. At the very least DEV and PROD. Changes to DEV need to propagate to 
the others and that is the problem: How to know what changes have been made to 
which servers and which haven't.

All (and I do mean ALL) DDL commands (creating, altering, dropping of the 
tables, columns and indexes, etc.) should be performed as sequentially named 
script files also stored in a folder under the project folder 
(e.g. "c:\myProj\DB\Deltas"). Include everything as scripts: create a table, 
add a column to that table, drop that column, add an index to that table, 
change the index, etc. By scripting all the deltas you can create the whole 
database; just run the sequence. One good way is to date each change file 
(e.g. 20160322A.sql). Also, include in the database a table of all the scripts 
that have been run on this database so you can track what has and hasn't been 
run. Of course this is a tedious manual process but easy to automate 
(i.e. DBDev).

Best Practices state that Stored Procedures, Views, Triggers and Functions 
need be created through script files. These should be stored under the project 
folder (e.g. "c:\myProject\DB\Procs"). Then to update or synchronize a server 
just run all the scripts. It can be managed as a manual process but is only 
workable where there are only a few scripts. Of course for this to work these 
scripts must be idempotent (i.e. you can run them multiple times and get the 
same results every time) by the intelligent use of if's and drops, etc.

By having the scripts in the project folder structure you can easily include 
them in source control. And new user can pull the source and run this utility 
to build a complete new/fresh database wherever (e.g. localhost) they want.

DBDev handles all this (and more) for you: 
  1) If the database doesn't exist it creates it.
  2) If the deltas table doesn't exist it creates it.
  3) It compares the list of files in the deltas folder with the deltas table 
  and runs, in order, the un-run scripts then adds them to the table.
  4) It runs all the scripts in the procs folder to refresh the stored 
  procedures, views, functions, etc.

It *requires* three parameters: 
  1) the connection string to the database.
  2) the name of the database (it doesn't need to exist on the given server yet)
  3) the path to your project (under which the db folder resides)

The command line options and their defaults:
[NoWait]                Don't wait for keystroke after run is finished.
[DeltaTable=_Delta]     Name to store the delta scripts that have been run 
						already.
|DBDir=DB]              The sub-dir under the ProjectDir where the scripts 
						persist.
[DeltaDir=Deltas]       The sub-dir under the DBDir where the delta scripts 
						are stored. These will be run once per database.
[ProcDir=Procs]         The sub-dir under the DBDir where the stored procedure 
						scripts are stored. These are run every time.
[DeltasOnly|ProcsOnly]  Either process just the deltas or just the stored 
						procedure scripts.

Given these defaults you'll have a folder named DB in your project, and in DB 
will be the folders Delta and Proc. If you are running this as a build pre or 
post process you will want the NoWait option.

-------------------------------------------------------------------------------

Typical Scenarios and Work Flows:

You start a project MyProjectXYZ so after you create the project in 
VisualStudio and under d:\development\MyProjectXYZ you add \DB\, \DB\Delta and 
\DB\Proc\. Then you run:

DBDev "datasource=localhost;etc..." XYZ d:\development\MyProjectXYZ

...and it will create the XYZ database and add the Delta table.

You write a number of scripts to add tables with their columns and keys and 
indexes, etc. These are all named per the day they were written plus 'a', 'b', 
'c', etc. You run these and the changes are effected on your development PC. 
These get committed into your Git and pushed to the server where other 
developers pull them and run DBDev on their machines.

You then realize you mixed table names between singular and plural and after 
having an armwrestling contest settle on signular as a standard. But since you
already checked them into source control, as soon as you did this those scripts
were locked. Changes to the database must now be done through new scripts; you 
can't change the scripts that have already been checked in as someone may have 
alreay run them on other servers. So you write a set of scripts that change the 
names of the already existing tables.

Work progresses on the projct and more scripts are written to add new tables, 
change indexes, define stored procedures or views, etc. You run DBDev each 
time and your database is up-to-date. 

Now you need to stand up the QA database: just change the connection string 
parameter and run DBDev! The new & empty database will be created and all the 
scripts run to create the objects. You will see tables added and then in a 
later script dropped! Columns added only to later be renamed. This is all OK
and as it should be.
-------------------------------------------------------------------------------

This project was developed under VisualStudio 2015 but doesn't do anything
fancy should should be fine under most compilers.

DBDev aids in the maintinance of databases through the software development
life cycle by automating what is normally error prone manual work.

Software development almost always involves a database. Done properly there should be a separate 
server for each phase: DEV, QA, UAT and PROD. Changes to DEV need to propagate to the others and
that is the problem: How to know what changes have been made to which servers and which haven't.

Stored Procedures, Views, Triggers and Functions need be created as script files, stored under 
the project folder (e.g. "c:\myProject\DB\Procs"). Then to update or synchronize a server just 
run all the scripts. It can be managed as a manual process but is only workable where there are
only a few scripts.

All (and I do mean ALL) DDL commands (creating, altering, dropping of the tables and indexes) 
should be performed as sequentially named script files also stored in a folder under the project 
folder (e.g. "c:\myProject\DB\Deltas"). Include everything as scripts: create a table, add a 
column to that table, drop that column, add an index to that table, change the index, etc. By
scripting all the deltas you can create the whole database; just run the sequence. One good 
way is to date each change file (e.g. 20160322A.sql). Also, include in the database a table
of all the scripts that have been run on this database so you can track what has and hasn't 
been run.

DBDev handles all this (and more) for you: 
  1) If the database doesn't exist it creates it.
  2) If the deltas table doesn't exist it creates it.
  3) It compares the list of files in the deltas folder with the deltas table and runs, 
  in order, the un-run scripts and adds them to the table.
  4) It runs all the scripts in the procs folder to refresh the stored procedures.

To run it requires three parameters: 
  1) Connection string to the database.
  2) Name of the database (it doesn't need to exist on the given server yet).
  3) Path to the project (under which the db folder resides).
